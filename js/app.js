// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var XiamiThief, batchReplace, child_process, core, fs, gui, isArray, isBool, mkdirp, path, pkg, safeFilter, setSavePath, str2bool, url, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

  path = require('path');

  fs = require('fs');

  gui = require('nw.gui');

  url = require('url');

  child_process = require('child_process');

  mkdirp = require('mkdirp');

  pkg = require('./package.json');

  core = require('./js/core');

  process.on('uncaughtException', function(err) {
    console.error(err);
    console.error(err.stack);
    return core.log(err);
  });

  window.win = gui.Window.get();

  win.on('close', function() {
    var _this = this;
    this.hide();
    return core.log("退出 " + pkg.name + " " + pkg.version, function() {
      return _this.close(true);
    });
  });

  win.on('minimize', function() {
    window.tray = new gui.Tray({
      title: "" + pkg.name + " " + pkg.version,
      icon: 'logo16.png'
    });
    window.menu = new gui.Menu();
    menu.append(new gui.MenuItem({
      type: 'normal',
      label: '退出',
      click: function() {
        return win.close();
      }
    }));
    tray.menu = menu;
    tray.on('click', function() {
      var _this = this;
      return core.log("启动 " + pkg.name + " " + pkg.version, function() {
        var tray;
        win.show();
        win.restore();
        win.setAlwaysOnTop(true);
        win.setAlwaysOnTop(false);
        _this.remove();
        return tray = null;
      });
    });
    return this.hide();
  });

  window.clipboard = gui.Clipboard.get();

  window.addEventListener('load', function() {
    return win.show();
  });

  safeFilter = function(str) {
    var removeSpan, safeFilename;
    removeSpan = function(str) {
      return str.replace('<span>', ' ').replace('</span>', '');
    };
    safeFilename = function(str) {
      return str.replace(/(\/|\\|\:|\*|\?|\"|\<|\>|\||\s+)/g, ' ');
    };
    return safeFilename(removeSpan(str));
  };

  isArray = function(input) {
    return typeof input === 'object' && input instanceof Array;
  };

  isBool = function(obj) {
    return obj === true || obj === false;
  };

  str2bool = core.str2bool;

  batchReplace = function(data, table) {
    var name, value;
    for (name in table) {
      value = table[name];
      if (value) {
        data = data.replace(name, value);
      }
    }
    return data;
  };

  setSavePath = function(info) {
    var artistFolder, data, fileFormat, filename, filenameTrackId, folderFormat, foldername, getTrackId, i, localSavePath, savePath, _i, _j, _len, _len1, _ref, _ref1;
    localSavePath = localStorage['xt.localSavePath'];
    filenameTrackId = str2bool(localStorage['xt.filenameTrackId']);
    artistFolder = str2bool(localStorage['xt.artistFolder']);
    folderFormat = localStorage['xt.foldernameFormat'];
    fileFormat = localStorage['xt.filenameFormat'];
    switch (info.type) {
      case 'album':
        foldername = batchReplace(folderFormat, {
          '%NAME%': info.name,
          '%ARTIST%': info.artist,
          '%COMPANY%': info.company,
          '%TIME%': info.time,
          '%LANGUAGE%': info.language
        });
        if (artistFolder) {
          foldername = path.join(safeFilter(info.artist), safeFilter(foldername));
        }
        foldername = path.resolve(localSavePath, foldername);
        getTrackId = function(data) {
          var trackId;
          trackId = data.trackId;
          if (trackId < 10) {
            return "0" + trackId;
          } else {
            return "" + trackId;
          }
        };
        _ref = info.data;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          data = _ref[i];
          filename = batchReplace(fileFormat, {
            '%NAME%': data.song.name,
            '%ARTIST%': data.artist.name,
            '%ALBUM%': data.album.name
          });
          if (filenameTrackId) {
            filename = "" + (getTrackId(data)) + " - " + filename;
          }
          savePath = safeFilter("" + filename + ".mp3");
          info.data[i].savePath = path.resolve(foldername, savePath);
        }
        info.savePath = foldername;
        break;
      case 'showcollect':
        foldername = path.resolve(localSavePath, safeFilter(info.name));
        _ref1 = info.data;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          data = _ref1[i];
          filename = batchReplace(fileFormat, {
            '%NAME%': data.song.name,
            '%ARTIST%': data.artist.name,
            '%ALBUM%': data.album.name
          });
          savePath = safeFilter("" + filename + ".mp3");
          info.data[i].savePath = path.resolve(foldername, savePath);
        }
        info.savePath = foldername;
        break;
      default:
        filename = batchReplace(fileFormat, {
          '%NAME%': info.song.name,
          '%ARTIST%': info.artist.name,
          '%ALBUM%': info.album.name
        });
        savePath = safeFilter("" + filename + ".mp3");
        info.savePath = path.resolve(localSavePath, savePath);
    }
    return info;
  };

  XiamiThief = angular.module('XiamiThief', []);

  XiamiThief.config(function($routeProvider) {
    return $routeProvider.when('/download', {
      templateUrl: 'views/download.html',
      controller: 'DownloadCtrl'
    }).when('/option', {
      templateUrl: 'views/option.html',
      controller: 'OptionCtrl'
    }).when('/help', {
      templateUrl: 'views/help.html',
      controller: 'HelpCtrl'
    }).otherwise({
      redirectTo: '/download'
    });
  });

  XiamiThief.directive('xtProcess', function() {
    return function(scope, element, attr) {
      return scope.$watch(function() {
        return scope.task.process;
      }, function(newValue, oldValue) {
        if (newValue) {
          if (newValue >= 0) {
            return element.css({
              'backgroundSize': "" + newValue + "% 40px"
            });
          } else {
            element.css({
              'backgroundSize': '100% 40px'
            });
            return element.css({
              'backgroundImage': '-webkit-linear-gradient(top, #e74c3c, #e74c3c)'
            });
          }
        }
      });
    };
  });

  XiamiThief.factory('DataService', function() {
    var data;
    data = {};
    return {
      'set': function(key, value) {
        return data[key] = value;
      },
      'get': function(key, def) {
        return data[key] || def;
      },
      'rm': function(key) {
        return delete data[key];
      }
    };
  }).factory('TaskManager', [
    'DataService', function(DataService) {
      var TaskManager, downloadManager;
      TaskManager = (function() {
        function TaskManager(limit) {
          this.limit = limit != null ? limit : 3;
          this.taskList = [];
          this.downloading = 0;
          this.undone = 0;
        }

        TaskManager.prototype.setLimit = function(value) {
          this.limit = value;
          return this.check();
        };

        TaskManager.prototype.check = function() {
          var i, task, _i, _len, _ref, _results,
            _this = this;
          if (this.downloading < this.limit && this.undone > this.downloading) {
            _ref = this.taskList;
            _results = [];
            for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
              task = _ref[i];
              if (task && !task.download) {
                task.download = true;
                this.downloading++;
                (function() {
                  var cb, index;
                  index = i;
                  /*
                  sameAlbumNumber = (obj for obj in @taskList when not obj.download and obj.album.id and obj.album.id is task.album.id and obj isnt task).length
                  if sameAlbumNumber is 0
                      task.last = true
                  */

                  cb = function(result) {
                    var ele, scope, _ref1, _ref2;
                    ele = document.querySelector("#list li[data-index='" + index + "']");
                    if (isBool(result)) {
                      if (scope = (_ref1 = angular.element(document.querySelector('#list'))) != null ? _ref1.scope() : void 0) {
                        scope.$apply(function() {
                          return task.process = result ? 100 : -1;
                        });
                      } else {
                        task.process = result ? 100 : -1;
                      }
                      core.log("下载" + (result ? '成功' : '失败') + " " + task.savePath);
                      _this.undone--;
                      _this.downloading--;
                      return _this.check();
                    } else {
                      if (scope = (_ref2 = angular.element(document.querySelector('#list'))) != null ? _ref2.scope() : void 0) {
                        return scope.$apply(function() {
                          return task.process = result * 100;
                        });
                      } else {
                        return task.process = result * 100;
                      }
                    }
                  };
                  core.downloadMusic(task, cb, str2bool(localStorage['xt.id3v23']), str2bool(localStorage['xt.lyric']), DataService.get('client', null));
                  return core.log("开始下载 " + task.savePath);
                })();
                this.check();
                break;
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };

        TaskManager.prototype.push = function(info) {
          var i, id, index, song, _i, _len, _ref;
          if (info.type) {
            index = [];
            _ref = info.data;
            for (id = _i = 0, _len = _ref.length; _i < _len; id = ++_i) {
              song = _ref[id];
              i = this.taskList.push(song) - 1;
              this.taskList[i].index = i;
              this.undone++;
              index.push(i);
            }
          } else {
            i = this.taskList.push(info) - 1;
            this.taskList[i].index = i;
            this.undone++;
            index = i;
          }
          if (this.downloading === 0) {
            this.check();
          }
          return index;
        };

        TaskManager.prototype.changeLimit = function(limit) {
          this.limit = limit;
        };

        return TaskManager;

      })();
      downloadManager = new TaskManager(parseInt(localStorage['xt.taskLimit']));
      return downloadManager;
    }
  ]);

  XiamiThief.filter('picSize', function() {
    return function(input, size) {
      return input != null ? input.replace('.jpg', "_" + size + ".jpg") : void 0;
    };
  }).filter('preview', function() {
    return function(input, type) {
      if (type === 'song') {
        input = input != null ? input.replace('%NAME%', '歌名') : void 0;
        input = input.replace('%ARTIST%', '歌手');
        input = input.replace('%ALBUM%', '专辑');
        input = input.replace('%TRACKID%', '音轨号(仅专辑有效, 其他下载不显示)');
        return "" + input + ".mp3";
      } else if (type === 'album') {
        input = input != null ? input.replace('%NAME%', '专辑名') : void 0;
        input = input.replace('%ARTIST%', '歌手');
        input = input.replace('%COMPANY%', '唱片公司');
        input = input.replace('%TIME%', '发行日期');
        input = input.replace('%LANGUAGE%', '语言');
        return input;
      }
    };
  });

  XiamiThief.controller('ControlCtrl', function($scope, $location) {
    $scope.isMaximize = false;
    $scope.close = function() {
      return win.close();
    };
    $scope.zoom = function() {
      if ($scope.isMaximize) {
        win.unmaximize();
        return $scope.isMaximize = false;
      } else {
        win.maximize();
        return $scope.isMaximize = true;
      }
    };
    $scope.minimize = function() {
      return win.minimize();
    };
    $scope.changeView = function(view) {
      return $location.path(view);
    };
    return $scope.title = "" + pkg.name + " " + pkg.version;
  });

  XiamiThief.controller('DownloadCtrl', function($scope, $timeout, DataService, TaskManager) {
    var _ref, _ref1;
    $scope.url = (_ref = DataService.get('url')) != null ? _ref : '';
    $scope.selected = (_ref1 = DataService.get('selected')) != null ? _ref1 : false;
    $scope.taskList = TaskManager.taskList;
    $scope.createTask = function() {
      var cb;
      cb = function(info) {
        var addTask;
        addTask = function(info) {
          return $scope.$apply(function() {
            var index;
            return index = TaskManager.push(info);
          });
        };
        if (info) {
          info = setSavePath(info);
          if (info.type) {
            mkdirp.sync(info.savePath);
            if (info.type === 'album') {
              return core.downloadAlbumCover(info, function(cb) {
                if (cb) {
                  return addTask(info);
                }
              }, str2bool(localStorage['xt.picture']), str2bool(localStorage['xt.id3v23']));
            } else {
              return addTask(info);
            }
          } else {
            return addTask(info);
          }
        } else if (str2bool(localStorage['xt.newTaskRetry'])) {
          return $timeout(function() {
            return core.getInfo($scope.url, cb);
          }, 5 * 1000);
        }
      };
      core.getInfo($scope.url, cb);
      $scope.url = '';
      return $scope.urlChange();
    };
    $scope.urlChange = function() {
      return DataService.set('url', $scope.url);
    };
    $scope.select = function(task) {
      $scope.selected = task;
      return DataService.set('selected', task);
    };
    return $scope.getUrlFromClip = function() {
      var text;
      text = clipboard.get('text');
      if (DataService.get('clip') !== text) {
        $scope.url = text;
        DataService.set('clip', text);
        return $scope.urlChange();
      }
    };
  });

  XiamiThief.controller('OptionCtrl', function($scope) {
    $scope.advancedShow = false;
    $scope.accountShow = true;
    $scope.downloadShow = false;
    $scope.account = function() {
      $scope.advancedShow = false;
      $scope.downloadShow = false;
      return $scope.accountShow = true;
    };
    $scope.download = function() {
      $scope.advancedShow = false;
      $scope.accountShow = false;
      return $scope.downloadShow = true;
    };
    return $scope.advanced = function() {
      $scope.accountShow = false;
      $scope.downloadShow = false;
      return $scope.advancedShow = true;
    };
  });

  XiamiThief.controller('OptionAccountCtrl', function($scope, DataService) {
    var formData, getForm, _ref, _ref1;
    $scope.errorInfo = false;
    $scope.logged = (_ref = DataService.get('logged')) != null ? _ref : false;
    $scope.info = (_ref1 = DataService.get('info')) != null ? _ref1 : {};
    formData = {};
    getForm = function() {
      $scope.validateUrl = '';
      return core.getLoginForm(function(data) {
        formData = data;
        if (data.validate != null) {
          return $scope.$apply(function() {
            return $scope.validateUrl = 'validate.png';
          });
        }
      });
    };
    if (!$scope.logged) {
      getForm();
    }
    $scope.rememberAccount = str2bool(localStorage['xt.rememberAccount']);
    $scope.email = $scope.rememberAccount ? localStorage['xt.email'] : void 0;
    $scope.password = $scope.rememberAccount ? localStorage['xt.password'] : void 0;
    $scope.login = function() {
      formData['email'] = $scope.email;
      formData['password'] = $scope.password;
      if ($scope.validateUrl) {
        formData['validate'] = $scope.validate;
      }
      core.getCookie(formData, function(result) {
        if (result) {
          if ($scope.rememberAccount) {
            localStorage['xt.email'] = $scope.email;
            localStorage['xt.password'] = $scope.password;
          } else {
            localStorage['xt.email'] = '';
            localStorage['xt.password'] = '';
          }
          core.getAccountInfo(function(info) {
            return $scope.$apply(function() {
              $scope.info = info;
              $scope.logged = true;
              DataService.set('info', $scope.info);
              return DataService.set('logged', $scope.logged);
            });
          });
          return $scope.errorInfo = false;
        } else {
          getForm();
          return $scope.errorInfo = '登录失败, 请重试';
        }
      });
      return localStorage['xt.rememberAccount'] = $scope.rememberAccount;
    };
    return $scope.logout = function() {
      if ($scope.rememberAccount) {
        $scope.email = localStorage['xt.email'];
        $scope.password = localStorage['xt.password'];
      } else {
        $scope.email = '';
        $scope.password = '';
      }
      core.accountLogout();
      getForm();
      $scope.logged = false;
      $scope.info = {};
      DataService.set('info', $scope.info);
      return DataService.set('logged', $scope.logged);
    };
  });

  XiamiThief.controller('OptionDownloadCtrl', function($scope, TaskManager) {
    $scope.localSavePath = localStorage['xt.localSavePath'];
    $scope.lyric = str2bool(localStorage['xt.lyric']);
    $scope.picture = str2bool(localStorage['xt.picture']);
    $scope.filenameFormat = localStorage['xt.filenameFormat'];
    $scope.foldernameFormat = localStorage['xt.foldernameFormat'];
    $scope.id3v23 = str2bool(localStorage['xt.id3v23']);
    $scope.filenameTrackId = str2bool(localStorage['xt.filenameTrackId']);
    $scope.artistFolder = str2bool(localStorage['xt.artistFolder']);
    $scope.taskLimit = parseInt(localStorage['xt.taskLimit']);
    $scope.newTaskRetry = str2bool(localStorage['xt.newTaskRetry']);
    $scope.chooseLocalSavePath = function(localSavePath) {
      var fileDialog;
      fileDialog = document.createElement('input');
      fileDialog.setAttribute('type', 'file');
      fileDialog.setAttribute('nwdirectory', '');
      fileDialog.setAttribute('nwworkingdir', localSavePath);
      fileDialog.addEventListener('change', function(e) {
        return $scope.$apply(function() {
          return $scope.localSavePath = fileDialog.value;
        });
      });
      return fileDialog.click();
    };
    return $scope.save = function() {
      localStorage['xt.localSavePath'] = $scope.localSavePath;
      localStorage['xt.lyric'] = $scope.lyric;
      localStorage['xt.picture'] = $scope.picture;
      localStorage['xt.filenameFormat'] = $scope.filenameFormat;
      localStorage['xt.foldernameFormat'] = $scope.foldernameFormat;
      localStorage['xt.id3v23'] = $scope.id3v23;
      localStorage['xt.filenameTrackId'] = $scope.filenameTrackId;
      localStorage['xt.artistFolder'] = $scope.artistFolder;
      if ($scope.taskLimit !== localStorage['xt.taskLimit']) {
        localStorage['xt.taskLimit'] = $scope.taskLimit;
        TaskManager.setLimit(parseInt($scope.taskLimit));
      }
      return localStorage['xt.newTaskRetry'] = $scope.newTaskRetry;
    };
  });

  XiamiThief.controller('OptionAdvancedCtrl', function($scope, DataService) {
    var nonVipHqChange;
    $scope.nonVipHq = DataService.get('nonVipHq', false);
    $scope.showDevTools = function() {
      return win.showDevTools();
    };
    $scope.showLog = function() {
      return child_process.exec('XiamiThief.log');
    };
    return nonVipHqChange = function() {
      var client;
      DataService.set('nonVipHq', $scope.nonVipHq);
      if ($scope.nonVipHq) {
        client = new PHPRPC_Client('http://blackglory.uhosti.com/server.php');
        return DataService.set('client', client);
      } else {
        return DataService.rm('client');
      }
    };
  });

  XiamiThief.controller('HelpCtrl', function($scope) {});

  localStorage['xt.rememberAccount'] = str2bool(localStorage['xt.rememberAccount'], false);

  localStorage['xt.email'] = localStorage['xt.rememberAccount'] ? (_ref = localStorage['xt.email']) != null ? _ref : '' : '';

  localStorage['xt.password'] = localStorage['xt.rememberAccount'] ? (_ref1 = localStorage['xt.password']) != null ? _ref1 : '' : '';

  localStorage['xt.localSavePath'] = (_ref2 = localStorage['xt.localSavePath']) != null ? _ref2 : core.execPath;

  localStorage['xt.lyric'] = str2bool(localStorage['xt.lyric'], false);

  localStorage['xt.picture'] = str2bool(localStorage['xt.picture'], true);

  localStorage['xt.filenameFormat'] = (_ref3 = localStorage['xt.filenameFormat']) != null ? _ref3 : '%NAME%';

  localStorage['xt.foldernameFormat'] = (_ref4 = localStorage['xt.foldernameFormat']) != null ? _ref4 : '%NAME% - %TIME%';

  localStorage['xt.id3v23'] = str2bool(localStorage['xt.id3v23'], false);

  localStorage['xt.filenameTrackId'] = str2bool(localStorage['xt.filenameTrackId'], false);

  localStorage['xt.artistFolder'] = str2bool(localStorage['xt.artistFolder'], false);

  localStorage['xt.taskLimit'] = (_ref5 = localStorage['xt.taskLimit']) != null ? _ref5 : 3;

  localStorage['xt.newTaskRetry'] = str2bool(localStorage['xt.newTaskRetry'], true);

}).call(this);
